#! /bin/bash

#set -o xtrace
#set -o nounset

##############################################################################
# Name      : doBackup
# License   : The MIT License (MIT)
# Goal      : Makes directory backups, for example your home directory, 
#             compressed with tar.bz2
# Operation : At the beginning of each month makes a full backup and every day 
#             of the month makes an incremental backup.
#             The scrip verifies if exist the full backup of this month.
#             If there isn't, makes the full backup, but if there is the full 
#             backup, makes an incremental backup since the last.
#             Also create log files with a list of the content of backup files.
#             Although you execute the script several blows at the same day, it 
#             only does one backup every day
#             You can create a exclusion file where you can establish all the 
#             files that you will not want to copy.
#             You can config the persistence period of the backups. Backups 
#             beyond this period will be deleted.
# Requires  : 'config_doBackup' is a text file with 4 lines
#             The fist line must contain the 'source backup folder'. 
#             Example: /home/user
#             The second line must contain the 'target backup folder'. 
#             Example: /smb/bck/user
#             The third line can contain the 'exclusion file' or nothing, is 
#             optional. If you does not want use the 'exclusion file' you must 
#             leave a blank line
#             The fourth line can contain the 'persistence period' expressed 
#             in days. Is optional but if is null, the default is 120.
# Files out : The monthly full backup name is 'year-month-0-hostname-full.tar.bz2'
#             The monthly full backup log is  'year-month-0-hostname.log'
#             The incremental backup name is  'year-month-day-hostname-inc.tar.bz2'
#             The incremental backup log is   'year-month-day-hostname.log'
#             There is a monthly .snap file that maintains the list of files to be
#             copied to the incremental backups
# Automation: To automate the backup, run this script from /etc/rc.local (as root) or ~/.bashrc (as user) to make the backup when the computer is power on. 
#             Or put in the crontab like: @reboot cd /root/backup/ ; /usr/bin/nice -n 19 /usr/bin/ionice -c2 -n7 /bin/bash /root/backup/doBackup 2>/root/backup/backup.err
# Usage     : ./doBackup &
##############################################################################

##############################################################################
#
# Check config file. The doBackup_config is a text file in the same directory, 
#    with 4 lines
#    The fist line must contain the 'source backup folder'. Example: /home/user
#    The second line must contain the 'target backup folder'. Example: /smb/bck/user
#    The third line can contain the 'exclusion file' or nothing. 
#    The fourth line can contain the 'persistence period' or nothing. 
#
##############################################################################
   if [[ -f doBackup_config ]]
   then
      {
          read -r v_backup_source        #Source backup folder
          read -r v_backup_target        #Target backup folder
          read -r v_exclusion_file       #PATH and filename of exclusion file
          read -r v_persistence_period   #persistence period expressed in days
      } < doBackup_config                #Config file whit 4 lines: Source backup folder, Target backup folder, PATH and filename of exclusion file (or blank line), persistence period expressed on days (or blank line)
   else
      v_pwd=$(pwd)                   #working directory
      echo "ERROR: Does not exist the config file: 'doBackup_config' in '$v_pwd'" >&2
      pkill xmessage                 #Close the pop-up window to show at X-session that backup is finished
      exit 1
   fi
   [[ -n "$v_backup_source" ]] || { echo "ERROR in doBackup_config: Fist line must contain the 'source backup folder'. Example: /home/user" >&2; pkill xmessage; exit 1; }
   [[ -n "$v_backup_target" ]] || { echo "ERROR in doBackup_config: Second line must contain the 'target backup folder'. Example: /smb/bck/user" >&2; pkill xmessage; exit 1; }
   [[ "$v_persistence_period" && "$v_persistence_period" = *[0-9]* ]] || v_persistence_period=120      #If $v_persistence_period is null or not numeric assign default value

##############################################################################
#
# Variables
#
##############################################################################
         V_VERSION="20170315"        #Version of this script 
        v_hostname=$(/bin/uname -n)  #Hostname where the script runs
      v_today_year=$(date +%Y)       #Year of today's date 
     v_today_month=$(date +%m)       #Month of today's date, not padded
   v_numeric_month=$(date +%-m)      #Month of today's date, padded
       v_today_day=$(date +%d)       #Day of today's date, not padded
     v_numeric_day=$(date +%-d)      #Day of today's date, padded
      v_log_backup=$v_backup_target/$v_today_year-$v_today_month-backup-$v_hostname.log                #The log of backup activity filename
        v_log_full=$v_backup_target/$v_today_year-$v_today_month-00-$v_hostname.log                    #The log of full backup filename
         v_log_inc=$v_backup_target/$v_today_year-$v_today_month-$v_today_day-$v_hostname.log          #The log of incremental backup filename
       v_snap_file=$v_backup_target/$v_today_year-$v_today_month-$v_hostname.snap                      #The .snap file that maintains the list of files to be copied to the incremental backups
     v_backup_full=$v_backup_target/$v_today_year-$v_today_month-00-full-$v_hostname.tar.bz2           #The full backup filename
      v_backup_inc=$v_backup_target/$v_today_year-$v_today_month-$v_today_day-inc-$v_hostname.tar.bz2  #The incremental backup filename
     v_status_full=$v_backup_target/$v_today_year-$v_today_month-00-full-$v_hostname.status            #The full backup status filename
      v_status_inc=$v_backup_target/$v_today_year-$v_today_month-$v_today_day-inc-$v_hostname.status   #The incremental backup status filename
    v_param_backup="-c -p -j -v -f"                                                                    #Tar parameters (Create,Preserve permissions,bz2 compression,Verbose,File)
       c_year_days=365               #number of days of 1 year (aprox)

##############################################################################
#
# Create the timestamp
#
##############################################################################
f_timestamp ()
{
   v_timestamp=$(date +%Y%m%d_%H%M%S)
}

##############################################################################
#
# Annotate the timestamp and the message in the log file
#
##############################################################################
f_log ()
{
   f_timestamp
   echo "$v_timestamp#$1" >> $v_log_backup
}

##############################################################################
#
# Check if there is source directory of the backup
# No  --> exit
# yes --> cd
#
##############################################################################
f_source_exist ()
{
   if [[ ! -d "$v_backup_source" ]]
   then
      f_log "ERROR: Does not exist the backup's source directory: $v_backup_source . Process aborted"
      pkill xmessage                 #Close the pop-up window to show at X-session that backup is finished
      exit 1
   else
      cd $v_backup_source
   fi
}

##############################################################################
#
# Check if there is target directory of the backup 
# No --> exit
#
##############################################################################
f_target_exist ()
{
   if [[ ! -d "$v_backup_target" ]]
   then
      f_log "ERROR: Does not exist the backup's target directory: $v_backup_target . Process aborted"
      pkill xmessage                 #Close the pop-up window to show at X-session that backup is finished
      exit 1
   fi
}

##############################################################################
#
# Check if there is the exclusion file of the backup 
# No --> configure backup without exclusions
# Yes --> configure backup with exclusions
#
##############################################################################
f_exclusion_exist ()
{
   if [[ ! -f "$v_exclusion_file" ]]
   then
      f_log "ERROR: Does not exist the exclusion file: $v_exclusion_file"
      v_exclusions=1
   else
      v_exclusions=0
   fi
}

##############################################################################
#
# Put the backup status 'in_progress'
#
##############################################################################
f_in_progress_status ()
{
   f_log "---Changing backup status --> in_progress"
   touch "$v_status_file".in_progress
}

##############################################################################
#
# Put the backup status 'done' if tar has finished whitout errors
#
##############################################################################
f_done_status ()
{
   if [[ "$v_error" -eq 0 ]]
   then
      if [[ -f "$v_status_file".in_progress ]]
      then
         f_log "---Changing backup status --> done"
         mv "$v_status_file".in_progress "$v_status_file".done
      fi
   fi
}

##############################################################################
#
# Check the status of the last backup
# in_progress --> delete the backup file. it was incomplete
# done --> is ready to do new backup
#
##############################################################################
f_last_status ()
{
   V_IN_PROGRESS=$(find $v_backup_target -name *.status.in_progress -print0)
   if [[ -f "$V_IN_PROGRESS" ]]
   then
      V_IN_PROGRESS_FILE=$(ls "$V_IN_PROGRESS" | cut -d. -f1)
      f_log "INFO: The backup file '$V_IN_PROGRESS_FILE.tar.bz2' was stopped when it was in progress."
      if [[ -f "$V_IN_PROGRESS_FILE".tar.bz2 ]]
      then
         rm "$V_IN_PROGRESS_FILE".*
         if [[ "$?" -eq 0 ]]
         then
            f_log "INFO: Deleting the unfinished backup file '$V_IN_PROGRESS_FILE.tar.bz2'"
         else
            f_log "ERROR: Can't delete the unfinished backup file '$V_IN_PROGRESS_FILE.tar.bz2'"
         fi
      else
         f_log "ERROR: Can't find the backup file '$V_IN_PROGRESS_FILE.tar.bz2'" 
      fi
   else
      V_DONE=$(find $v_backup_target -name *.status.done -print0)
      if [[ -f "$V_DONE" ]]
      then
         V_DONE_FILE=$(ls "$V_DONE" | cut -d. -f1)
         f_log "INFO: The backup '$V_DONE_FILE' was finished succesfully."
      else
         f_log "WARNING: Can't find the last 'status backup file'" 
      fi
   fi
}

##############################################################################
#
# Check for the full backup of this month
# No --> configure full backup 
# Yes --> configure incremental backup
# If today's backup exist --> Process aborted. Once a day is enough
#
##############################################################################
f_full_inc ()
{
   if [[ ! -f "$v_backup_full" ]]
   then
      v_backup_file=$v_backup_full
      v_log_file=$v_log_full
      v_status_file=$v_status_full
   elif [[ ! -f "$v_backup_inc" ]]
   then
      v_backup_file=$v_backup_inc
      v_log_file=$v_log_inc
      v_status_file=$v_status_inc
   else
      f_log "INFO: Backup file: $v_backup_inc . Exist. Process aborted"
      pkill xmessage                 #Close the pop-up window to show at X-session that backup is finished
      exit 2
   fi
   rm "$V_DONE"   #Deletes the last status (done) backup file
}

##############################################################################
#
# Performs the backup as has been configured
# Adds the file list to the month full log file
# Create the incremental log file, with the today file list
#
##############################################################################
f_dobackup ()
{
   f_log "---Source directory of the backup: $v_backup_source ---"
   f_log "---Backup filename: $v_backup_file ---"
   f_log "---Log filename:    $v_log_file ---"
   f_log "---Status filename: $v_status_file ---"
   if [[ $v_exclusions -eq 0 ]]
   then
      f_log "---Exclusion file:  $v_exclusion_file ---"
      tar $v_param_backup $v_backup_file -X $v_exclusion_file -g $v_snap_file ./* | grep -v /$ | tee $v_log_file  
      v_error=$?
   else
      f_log "---Exclusion file:  not exist ---"
      tar $v_param_backup $v_backup_file -g $v_snap_file ./* | grep -v /$ | tee $v_log_file 
      v_error=$?
   fi
   if [[ "$v_error" -eq 0 ]]
   then
      f_log "---$(cat $v_log_file | wc -l) files succesfully backup"
   else
      f_log "---ERROR: $v_error"
      f_log "---ABORTING BACKUP---"
   fi
}

##############################################################################
#
# It obtains the days of each month from the beginning of the year until the 
# current month and the sum of all
#
##############################################################################
f_month_days ()
{
   v_sum_month_days=0 #starting value
   v_i=1              #starting valuefor the loop
   while [[ $v_i -lt $1 ]] 
   do
      case $v_i in
         1|3|5|7|8|10|12) v_month_days=31 ;;
         4|6|9|11) v_month_days=30 ;;
         2) v_month_days=28 ;;
      esac
      v_sum_month_days=$(( $v_sum_month_days + $v_month_days ))
      v_i=$(( $v_i + 1 ))
   done
}

##############################################################################
#
# Gets the difference of days between two dates
# Calculates the time (in days) of the file, since the day 0000-01-01
# Calculate the difference of two previous calculations
# YYYY-MM-DD-*  
# 00000000011  
# 12345678901
#
##############################################################################
f_difference ()
{
   v_old_file_name=$(echo "$1" | awk 'BEGIN{FS="/"} {print $NF}')
   v_old_file_year=$(echo "$v_old_file_name" | cut -c 1-4)
   v_zero=$(echo "$v_old_file_name" | cut -c 6)
   if [[ "$v_zero" -eq "0" ]] #gets the month number
   then
      v_old_file_month=$(echo "$v_old_file_name" | cut -c 7) 
   else
      v_old_file_month=$(echo "$v_old_file_name" | cut -c 6-7) 
   fi
   f_month_days $v_old_file_month
   v_zero=$(echo "$v_old_file_name" | cut -c 9) 
   if [[ "$v_zero" = *[0-9]* ]] #gets the day number
   then
      if [[ "$v_zero" -eq "0" ]]
      then
         v_old_file_day=$(echo "$v_old_file_name" | cut -c 10) 
      else
         v_old_file_day=$(echo "$v_old_file_name" | cut -c 9-10) 
      fi
   else
      v_old_file_day=31 
   fi
   v_old_file_days=$(( ( $v_old_file_year * $c_year_days ) +  $v_sum_month_days  +  $v_old_file_day )) #days from year 0 until the backup file's day
   v_difference=$(( $v_today_days - $v_old_file_days ))  #days of difference between the backup file's day and today 
}

##############################################################################
#
# Delete the expired files. Files with persistence period exceeded
# Calculates the time (in days) of today, since the day 0000-01-01
# Gets the list of backup files and the difference of date between today and 
# the backup files
# If the difference is greather than the persistence period, the file is expired
#
##############################################################################
f_delete_expired ()
{
   f_month_days $v_numeric_month
   v_today_days=$(( ( $v_today_year * $c_year_days ) +  $v_sum_month_days  +  $v_numeric_day )) #days from year 0 until today
   for i in $(ls $v_backup_target/????-??-* | sort) #gets the backup files
   do
      f_difference $i
      if [[ "$v_difference" -gt "$v_persistence_period" ]]
      then
         /bin/rm $i && f_log "---Deleted file:    $i ($v_difference days. Expired)"
      fi
   done
}

##############################################################################
#
# Main
#
##############################################################################
xmessage "Backup is running. Please don't close this window. Minimize" &   #Open a pop-up window to show at X-session that backup is running
f_target_exist
f_source_exist
f_exclusion_exist
f_last_status
f_full_inc
f_log "+++Starting backup+++v$V_VERSION+++"
f_in_progress_status
f_dobackup
f_done_status
f_delete_expired
f_log "+++Ending   backup+++"
pkill xmessage      #Close the pop-up window to show at X-session that backup is finished
##############################################################################
## TAR parameters
#  -A, --catenate, --concatenate
#     append tar files to an archive
#  -g, --listed-incremental FILE
#    handle new GNU-format incremental backup
#  --occurrence
#    process only the NUMBERth occurrence of each file in the archive;
#  -u, --update
#     only append files newer than copy in archive
#  -c, --create
#     create a new archive
#  -C, --directory DIR
#     change to directory DIR
#  --exclude=PATTERN
#     exclude files, given as a PATTERN
#  --exclude-backups
#     exclude backup and lock files
#  --exclude-caches-all
#     exclude directories containing CACHEDIR.TAG
#  -f, --file ARCHIVE
#     use archive file or device ARCHIVE
#  --index-file=FILE
#     send verbose output to FILE
#  -j, --bzip2 (.bz2)
#  -k, --keep-old-files
#     don't replace existing files when extracting
#  --overwrite
#     overwrite existing files when extracting
#  --level=NUMBER
#     dump level for created listed-incremental archive
#  -p, --preserve-permissions, --same-permissions
#     extract information about file permissions (default for superuser)
#  --show-defaults
#     show tar defaults
#  -T, --files-from FILE
#     get names to extract or create from FILE
#  --totals
#     print total bytes after processing the archive;
#  -v, --verbose
#     verbosely list files processed
#  -W, --verify
#     attempt to verify the archive after writing it
#  -X, --exclude-from FILE
#     exclude patterns listed in FILE
#  tar --show-defaults
#     --format=gnu -f- -b20 --quoting-style=escape --rmt-command=/usr/lib/tar/rmt --rsh-command=/usr/bin/rsh
#The first argument to tar should be a function; either one of the letters Acdrtux, or one of the long function names. A function letter need not be prefixed with ``-'', and may be combined with other single-letter options.  A long function name must be prefixed with --. Some options take a parameter; with the single-letter form these must be given as separate arguments.  With the long form, they may be given by appending =value to the option.
#

